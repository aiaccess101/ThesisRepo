// Block definition (there may be more than one block per file)
FUNCTION_BLOCK fuzzy

// Define input variables
VAR_INPUT
    exam_average : REAL;
    improvement_rate : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    result : REAL;
END_VAR

// Fuzzify input variable 'exam_average'
FUZZIFY exam_average
    TERM vl := (0, 1) (25, 0) ; 
    TERM l := (0, 0) (25,1) (25,1) (50,0);
    TERM m := (25, 0) (50, 1) (75, 0);
	TERM h := (50, 0) (75, 1) (100, 0);
	TERM vh := (75, 0) (100, 1);
END_FUZZIFY

// Fuzzify input variable 'improvementRate'
FUZZIFY improvement_rate
    TERM hd := (-10, 1) (-5, 0);
    TERM sd := (-10,0) (-5,1) (0,0);
	TERM ni := (-5,0) (0,1) (5,0);
	TERM si := (0,0) (5,1) (10,0);
	TERM hi := (5,0) (10,1);
END_FUZZIFY

// Defzzzify output variable 'result'
DEFUZZIFY result
    TERM low := (0,0) (25,1) (50,0);
    TERM good := (50,0) (65,1) (80,0);
	TERM high := (80,0) (90,1) (100,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    //ACCU : MAX;

    RULE 1 : IF exam_average IS vl AND improvement_rate IS hd
                THEN result IS low;
	RULE 2 : IF exam_average IS vl AND improvement_rate IS sd
                THEN result IS low;
	RULE 3 : IF exam_average IS vl AND improvement_rate IS ni
                THEN result IS low;
	RULE 4 : IF exam_average IS vl AND improvement_rate IS si
                THEN result IS low;
	RULE 5 : IF exam_average IS vl AND improvement_rate IS hi
                THEN result IS low;
	RULE 6 : IF exam_average IS l AND improvement_rate IS hd
                THEN result IS low;
	RULE 7 : IF exam_average IS l AND improvement_rate IS sd
                THEN result IS low;
	RULE 8 : IF exam_average IS l AND improvement_rate IS ni
                THEN result IS low;
	RULE 9 : IF exam_average IS l AND improvement_rate IS si
                THEN result IS good;
	RULE 10 : IF exam_average IS l AND improvement_rate IS hi
                THEN result IS good;
	RULE 11 : IF exam_average IS m AND improvement_rate IS hd
                THEN result IS low;
	RULE 12 : IF exam_average IS m AND improvement_rate IS sd
                THEN result IS low;
	RULE 13 : IF exam_average IS m AND improvement_rate IS ni
                THEN result IS good;
	RULE 14 : IF exam_average IS m AND improvement_rate IS si
                THEN result IS good;
	RULE 15 : IF exam_average IS m AND improvement_rate IS hi
                THEN result IS high;
	RULE 16 : IF exam_average IS h AND improvement_rate IS hd
                THEN result IS good;
	RULE 17 : IF exam_average IS h AND improvement_rate IS sd
                THEN result IS good;
	RULE 18 : IF exam_average IS h AND improvement_rate IS ni
                THEN result IS high;
	RULE 19 : IF exam_average IS h AND improvement_rate IS si
                THEN result IS high;
	RULE 20 : IF exam_average IS h AND improvement_rate IS hi
                THEN result IS high;
	RULE 21 : IF exam_average IS vh AND improvement_rate IS hd
                THEN result IS good;
	RULE 22 : IF exam_average IS vh AND improvement_rate IS sd
                THEN result IS good;
	RULE 23 : IF exam_average IS vh AND improvement_rate IS ni
                THEN result IS high;
	RULE 24 : IF exam_average IS vh AND improvement_rate IS si
                THEN result IS high;
	RULE 25 : IF exam_average IS vh AND improvement_rate IS hi
                THEN result IS high;
				
END_RULEBLOCK

END_FUNCTION_BLOCK